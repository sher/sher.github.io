<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Core Data | The Cookbook]]></title>
  <link href="http://tundrax.github.io/blog/categories/core-data/atom.xml" rel="self"/>
  <link href="http://tundrax.github.io/"/>
  <updated>2013-05-13T14:06:15+09:00</updated>
  <id>http://tundrax.github.io/</id>
  <author>
    <name><![CDATA[Sher]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Core Data: Automate master data preloading]]></title>
    <link href="http://tundrax.github.io/blog/2013/05/06/core-data-automate-master-data-preloading/"/>
    <updated>2013-05-06T14:39:00+09:00</updated>
    <id>http://tundrax.github.io/blog/2013/05/06/core-data-automate-master-data-preloading</id>
    <content type="html"><![CDATA[<h3 class="problem">Problem</h3>


<p>Given a generic iOS application 'Blog' with data model as below:</p>

<p><img class="screenshot" src="/images/blog-data-model.png"></p>

<p>We want to prepopulate data for 'Categories' table in our SQLite database.</p>

<h3 class="solution">Solution</h3>


<p class="notice">This solution uses the approach described in <a href="http://www.raywenderlich.com/12170/core-data-tutorial-how-to-preloadimport-existing-data-updated">Core Data on iOS 5 Tutorial: How To Preload and Import Existing Data</a>, we will create an OS X Command Line Tool application, which will reference the data model in our 'Blog' application and prepopulate the data. Except we automate the building process.</p>




<!--more-->


<h3>Step 1</h3>

<p>Make sure you are using <strong>XCode Workspace</strong> with your project and skip to <strong>Step 2</strong>. If not, follow the steps below to create a new workspace:</p>

<ol>
<li>Open your project in XCode</li>
<li>Goto File > New > Workspace... or use the shortcut Command + Control + N</li>
<li>Name the <strong>new workspace</strong> the same as your project and save it in your project folder.</li>
<li><img class="screenshot" src="/images/blog-create-workspace.png"></li>
<li>Quit XCode</li>
<li>Open the Workspace <code>$ open Blog.xcworkspace</code></li>
<li>Drag your project from Finder to the Workspace</li>
<li><img class="screenshot" src="/images/blog-drag-project-to-workspace.png"></li>
<li>We have successfully added your project into a workspace.</li>
</ol>


<h3>Step 2</h3>

<ol>
<li>While your workspace is open create a new project by selecting <strong>File > New > Project</strong></li>
<li>From the prompt window select <strong>OS X > Application > Command Line Tool</strong> and click <strong>Next</strong></li>
<li><img class="screenshot" src="/images/blog-create-commandline-app.png"></li>
<li>In the next window enter <strong>MasterDataLoader</strong> for the <strong>Product Name</strong>, select <strong>Core Data</strong> in the <strong>Type</strong> pulldown and click <strong>Next</strong></li>
<li><img class="screenshot" src="/images/blog-commandline-app-name.png"></li>
<li>In the next window select the folder where your workspace is stored, select your workspace for <strong>Add to</strong> and <strong>Group</strong> pulldowns. Click <strong>Create</strong>.</li>
<li><img class="screenshot" src="/images/blog-commandline-app-save.png"></li>
<li>Now you have two applications in your workspace</li>
<li><img class="screenshot" src="/images/blog-commandline-app-created.png"></li>
<li>Remove the <strong>MasterDataLoader.xcdatamodeld</strong> file from the <strong>MasterDataLoader</strong> application and <strong>Move to Trash</strong></li>
<li>Open the <code>main.m</code> file in the <strong>MasterDataLoader</strong> application</li>
<li>Change the lines in <code>managedObjectModel()</code> and <code>managedObjectContext()</code> methods from
<code>objective-c
NSString *path = @"MasterDataLoader";
path = [path stringByDeletingPathExtension];
</code>
<code>objective-c
NSString *path = [[NSProcessInfo processInfo] arguments][0];
path = [path stringByDeletingPathExtension];
</code>
to
<code>objective-c
NSString *path = @"Blog";
</code></li>
</ol>


<p>Now run <strong>MasterDataLoader</strong> application.</p>

<br />


<p><img class="screenshot" src="/images/blog-commandline-app-run.png"></p>

<p>You should get an error <code>Cannot create an NSPersistentStoreCoordinator with a nil model</code>.
Now we made sure our command line app runs and can't find a compiled data model object. Great!</p>

<h3>Step 3</h3>

<p>Add a new <strong>Run Script</strong> build phase to your 'Blog' application, name it <strong>Run MasterDataLoader</strong> and drag it under <strong>Compile Sources</strong> phase.
<img class="screenshot" src="/images/blog-create-runscript.png">
<img class="screenshot" src="/images/blog-runscript-drag.png"></p>

<p>Now paste this code in the <strong>run script</strong> you just created and save.
<code>bash
echo "Copying momd to MasterDataLoader folder"
cp -R ${BUILT_PRODUCTS_DIR}/${TARGET_NAME}.app/${TARGET_NAME}.momd ${BUILT_PRODUCTS_DIR}/../Debug/
cd ${BUILT_PRODUCTS_DIR}/../Debug/
echo "Running MasterDataLoader"
./MasterDataLoader
echo "Moving ${TARGET_NAME}.sqlite"
mv ./${TARGET_NAME}.sqlite ${BUILT_PRODUCTS_DIR}/${TARGET_NAME}.app/
echo "MasterDataLoder finished."
</code>
<img class="screenshot" src="/images/blog-runscript-edit.png"></p>

<p>Edit the scheme for 'Blog' application. Add <strong>MasterDataLoader</strong> in build targets.
<img class="screenshot" src="/images/blog-scheme-edit.png"></p>

<p>This step makes sure that <strong>MasterDataLoader</strong> is build before the 'Blog' app.</p>

<h3>Step 4</h3>

<p>Open <code>AppDelegate.m</code> in the 'Blog' application and add the following code
``` objective-c
if (![[NSFileManager defaultManager] fileExistsAtPath:[storeURL path]]) {
  NSURL <em>preloadURL = [NSURL fileURLWithPath:[[NSBundle mainBundle] pathForResource:@"Blog" ofType:@"sqlite"]];
  NSError</em> err = nil;
  if (![[NSFileManager defaultManager] copyItemAtURL:preloadURL toURL:storeURL error:&amp;err]) {</p>

<pre><code>NSLog(@"Oops, could copy preloaded data");
</code></pre>

<p>  }
}
<code>
under the line
</code> objective-c
NSURL *storeURL = [[self applicationDocumentsDirectory] URLByAppendingPathComponent:@"Blog.sqlite"];
```
As you can see, here we check if the SQLite database already exists. If not, we copy the one which is in the main bundle to the 'Documents' folder.</p>

<p>Right now our SQLite datamase is empty. Let's fetch 'Categories' and check if the table is empty.
Add the following code to the <code>application:didFinishLaunchingWithOptions:</code> method just before <code>return YES</code> line.
<code>objective-c
NSFetchRequest *request = [[NSFetchRequest alloc] init];
NSEntityDescription *entity = [NSEntityDescription entityForName:@"Category" inManagedObjectContext:self.managedObjectContext];
[request setEntity:entity];
NSError *error =  nil;
NSArray *cats = [self.managedObjectContext executeFetchRequest:request error:&amp;error];
for (Category *cat in cats) {
  NSLog(@"cat: %@", cat.name);
}
</code>
Don't forget to import <code>Category.h</code>
``` objective-c</p>

<h1>import "Category.h"</h1>

<p>```
Run the 'Blog' application. The console should print nothing.
<img class="screenshot" src="/images/blog-run.png"></p>

<h3>Step 5</h3>

<p>Lets add some <code>Categories</code>.
Drag the <code>Category.h</code> file from 'Blog' application to <strong>MasterDataLoader</strong> application.</p>

<p><img class="screenshot" src="/images/blog-drag-category.png"></p>

<p>Open the <code>main.m</code> file. Import <code>Category.h</code>.
``` objective-c</p>

<h1>import "Category.h"</h1>

<p><code>
Replace the code in</code>main()<code>method
</code> objective-c
// Custom code here...
// Save the managed object context
NSError *error = nil;
if (![context save:&amp;error]) {</p>

<pre><code>NSLog(@"Error while saving %@", ([error localizedDescription] != nil) ? [error localizedDescription] : @"Unknown Error");
exit(1);
</code></pre>

<p>}
<code>
with
</code> objective-c
NSArray <em>categories = @[@"objective-c", @"ruby", @"python"];
for (NSString </em>name in categories) {</p>

<pre><code>Category *cat = [NSEntityDescription insertNewObjectForEntityForName:@"Category" inManagedObjectContext:managedObjectContext()];
cat.name = name;
if (![context save:&amp;error]) {
    NSLog(@"Error while saving %@", ([error localizedDescription] != nil) ? [error localizedDescription] : @"Unknown Error");
    exit(1);
}
</code></pre>

<p>}
```</p>

<h3>Before running</h3>

<p>Delete 'Blog' application from the simulator.</p>

<h3>Run</h3>

<p>Run the 'Blog' application.</p>

<br /><img class="screenshot" src="/images/blog-run.png">


<p>The console should print three categories:
<code>bash
2013-05-07 01:00:13.911 Blog[61827:c07] cat: objective-c
2013-05-07 01:00:13.913 Blog[61827:c07] cat: ruby
2013-05-07 01:00:13.913 Blog[61827:c07] cat: python
</code></p>

<h3 class="discussion">Discussion</h3>


<p>This way you can reference any managed object from <strong>MasterDataLoader</strong> app and preload the data.</p>
]]></content>
  </entry>
  
</feed>
